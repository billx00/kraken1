package ExploitDaB

import (
	"fmt"
	"framework/kraken/Kraken/Public"
)

type Option struct {
	Name  string
	Value string
	Descr string
}

func MakeStr(c string, l int) string {
	var r string
	for i := 0; i < l; i++ {
		r += c
	}
	return r
}

func DisplayOptions(Options []Option) {
	var NameStr string = "Name"
	var ValueStr string = "Value"
	var DescriptionStr string = "Description"

	var LongestName int = len(NameStr)
	var LongestValue int = len(ValueStr)
	var LongestDescription int = len(DescriptionStr)
	for i := 0; i < len(Options); i++ {
		Options[i].Value = Public.GetGlobalOrPirvate(Options[i].Name)

		if LongestName < len(Options[i].Name) {
			LongestName = len(Options[i].Name)
		}

		if LongestValue < len(Options[i].Value) {
			LongestValue = len(Options[i].Value)
		}

		if LongestDescription < len(Options[i].Descr) {
			LongestDescription = len(Options[i].Descr)
		}
	}

	fmt.Printf("%s"+MakeStr(" ", LongestName-len(NameStr))+" %s"+MakeStr(" ", LongestValue-len(ValueStr))+" %s\n", NameStr, ValueStr, DescriptionStr)

	for i := 0; i < len(Options); i++ {
		fmt.Printf("%s"+MakeStr(" ", LongestName-len(Options[i].Name))+" %s"+MakeStr(" ", LongestValue-len(Options[i].Value))+" %s\n", Options[i].Name, Options[i].Value, Options[i].Descr)
	}
}
