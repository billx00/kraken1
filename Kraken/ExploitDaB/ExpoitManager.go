package ExploitDaB

import (
	"fmt"
	"framework/kraken/Gostyle/Fore"
	"framework/kraken/Gostyle/Log"
	"framework/kraken/Kraken/Public"
	"framework/kraken/Kraken/Session"
)

type Exploit struct {
	Pname string

	Execute func()
	Options []Option
}

var ExploitDB []Exploit

func RunExploit(Exploit string) {
	var _Session string = Public.GetGlobalOrPirvate("session")

	if Session.GetSessionIndex(_Session) == -1 {
		Log.Error("Session not found.")
		return
	}

	for i := 0; i < len(ExploitDB); i++ {
		if ExploitDB[i].Pname == Exploit {
			Log.Info(fmt.Sprintf("Executing %s on %s\n", Fore.Colorize(Fore.RED, Exploit), Fore.Colorize(Fore.GREEN, _Session)))
			ExploitDB[i].Execute()
			return
		}
	}

	Log.Error("Exploit not found.")
}

func ExecPayload(session string, payload string) {
	if Session.GetSessionIndex(session) != -1 {
		if !Session.IsSessionActive(Session.Sessions[Session.GetSessionIndex(session)]) {
			fmt.Printf("%s", "Session not active.")
			return
		}
		Session.Sessions[Session.GetSessionIndex(session)].Job = payload
		Session.SessionStartWait(Session.Sessions[Session.GetSessionIndex(session)].SessionId)
		Session.SessionWait()
	}
}
